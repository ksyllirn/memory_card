from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QHBoxLayout
from PyQt5.QtWidgets import QPushButton, QRadioButton, QGroupBox, QButtonGroup
import sys
from random import shuffle
import style

app = QApplication(sys.argv)
window = QWidget()
window.setStyleSheet(style.window)
window.setWindowTitle('Memory card')
window.resize(400,400)


btn_ok = QPushButton('ответить')
lbl_question = QLabel('вопрос')
grpbox_answers = QGroupBox('варианты ответа')
radiogroup = QButtonGroup()

rbtn_1 = QRadioButton('1')
rbtn_2 = QRadioButton('2')
rbtn_3 = QRadioButton('3')
rbtn_4 = QRadioButton('4')

radiogroup.addButton(rbtn_1)
radiogroup.addButton(rbtn_2)
radiogroup.addButton(rbtn_3)
radiogroup.addButton(rbtn_4)

def show_question():
    radiogroup.setExclusive(False)
    rbtn_1.setChecked(False)
    rbtn_2.setChecked(False)
    rbtn_3.setChecked(False)
    rbtn_4.setChecked(False)
    grpbox_result.hide()
    grpbox_answers.show()
    btn_ok.setText('ответить')
    btn_ok.clicked.connect(show_result)
    radiogroup.setExclusive(True)   

def show_result():
    check_answer()
    grpbox_answers.hide()
    grpbox_result.show()
    btn_ok.setText('следующий')
    btn_ok.clicked.connect(show_question)


grpbox_result = QGroupBox('Результат теста')
lbl_right_answer = QLabel('правильный ответ__')
v_line_res = QVBoxLayout()
v_line_res.addWidget(lbl_right_answer,alignment= Qt.AlignCenter)
grpbox_result.setLayout(v_line_res)

btn_ok.clicked.connect(show_result)

h_line_ans = QHBoxLayout()
v_line_ans_1 = QVBoxLayout()
v_line_ans_2 = QVBoxLayout()
 
v_line_ans_1.addWidget(rbtn_1)
v_line_ans_1.addWidget(rbtn_2)
v_line_ans_2.addWidget(rbtn_3)
v_line_ans_2.addWidget(rbtn_4)
h_line_ans.addLayout(v_line_ans_1)
h_line_ans.addLayout(v_line_ans_2)

grpbox_answers.setLayout(h_line_ans)

v_line_main = QVBoxLayout()
h_line_main_1 = QHBoxLayout()
h_line_main_2 = QHBoxLayout()
h_line_main_3 = QHBoxLayout()

h_line_main_1.addWidget(lbl_question, alignment= Qt.AlignCenter)
h_line_main_2.addWidget(grpbox_answers)
h_line_main_2.addWidget(grpbox_result)
h_line_main_3.addStretch(1)
h_line_main_3.addWidget(btn_ok,stretch=2)
h_line_main_3.addStretch(1)

v_line_main.addLayout(h_line_main_1,stretch=2)
v_line_main.addLayout(h_line_main_2,stretch=8)
v_line_main.addStretch(1)
v_line_main.addLayout(h_line_main_3,stretch=1)
v_line_main.addStretch(1)

class Question():
    def __init__(self, question, right_answer, wrong1, wrong2, wrong3):
        self.question = question
        self.right_answer = right_answer
        self.wrong1 = wrong1
        self.wrong2 = wrong2
        self.wrong3 = wrong3

question_list = [ 
    Question('Вопрос1', 'правильный', 'немного нет', 'совсем нет', 'точно не этот'),
    Question('Вопрос2', 'правильный', 'немного нет', 'совсем нет', 'точно не этот'),
    Question('Вопрос3', 'правильный', 'немного нет', 'совсем нет', 'точно не этот')
]

answers = [rbtn_1, rbtn_2, rbtn_3, rbtn_4]
def ask(q):
    lbl_question.setText(q.question)
    shuffle(answers)
    answers[0].setText(q.right_answer)
    answers[1].setText(q.wrong1)
    answers[2].setText(q.wrong2)
    answers[3].setText(q.wrong3)

def check_answer():
    if answers[0].isChecked():
        lbl_right_answer.setText('ответ норм')
        grpbox_result.setStyleSheet('QGroupBox {border: 2px solid #00FF00; border-radius: 8%;}')
    else:
        lbl_right_answer.setText('ответ не норм \n правильный ответ:'+ answers[0].text())
        grpbox_result.setStyleSheet('QGroupBox {border: 2px solid #ffccbb; border-radius: 8%;}')
    
ask(coise)
#
grpbox_result.hide()
#
window.setLayout(v_line_main)
window.show()
app.exec()
